{
    "questions": [
        {
            "top10": [
                {
                    "label": "Benin",
                    "number": 9.946524064171124
                },
                {
                    "label": "Liechtenstein",
                    "number": 6.77052127022169
                },
                {
                    "label": "Niger",
                    "number": 5.215047788397421
                },
                {
                    "label": "Djibouti",
                    "number": 5.116416150898909
                },
                {
                    "label": "Brunei",
                    "number": 5.067594592432606
                },
                {
                    "label": "Iran",
                    "number": 4.6967974965359405
                },
                {
                    "label": "Cameroon",
                    "number": 4.685465350285295
                },
                {
                    "label": "Aruba",
                    "number": 4.253112033195021
                },
                {
                    "label": "Germany",
                    "number": 4.132632219656246
                },
                {
                    "label": "Russia",
                    "number": 4.025043069527008
                }
            ],
            "answer": "Benin",
            "answerValue": 9.946524064171124,
            "question": "Which country was the most cooperative last year?",
            "rowIndex": 2,
            "approved": true,
            "params": {
                "codes": "('031', '030')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 100,
                "min_events": 1000
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('031', '030') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1000\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('031', '030') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1000\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "% of Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 380821133
        },
        {
            "top10": [
                {
                    "label": "Benin",
                    "number": 3.1372549019607843
                },
                {
                    "label": "Armenia",
                    "number": 2.715272972523189
                },
                {
                    "label": "Niger",
                    "number": 1.9726605912424984
                },
                {
                    "label": "Cameroon",
                    "number": 1.7520183725169876
                },
                {
                    "label": "Chad",
                    "number": 1.6296712559707782
                },
                {
                    "label": "Iceland",
                    "number": 0.9528346831824679
                },
                {
                    "label": "Belarus",
                    "number": 0.805189675341446
                },
                {
                    "label": "Kazakhstan",
                    "number": 0.6832371304040523
                },
                {
                    "label": "Tajikistan",
                    "number": 0.662361318099023
                },
                {
                    "label": "Kyrgyzstan",
                    "number": 0.5552813425468904
                }
            ],
            "answer": "Benin",
            "answerValue": 3.1372549019607843,
            "question": "Which country had the most cooperative military last year?",
            "rowIndex": 3,
            "approved": true,
            "params": {
                "codes": "('0312')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 1000,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0312') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0312') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 380579334
        },
        {
            "top10": [
                {
                    "label": "South Sudan",
                    "number": 178
                },
                {
                    "label": "Ukraine",
                    "number": 134
                },
                {
                    "label": "Somalia",
                    "number": 111
                },
                {
                    "label": "Central African Republic",
                    "number": 109
                },
                {
                    "label": "Mali",
                    "number": 96
                },
                {
                    "label": "Burundi",
                    "number": 77
                },
                {
                    "label": "United States",
                    "number": 70
                },
                {
                    "label": "Russia",
                    "number": 52
                },
                {
                    "label": "Sudan",
                    "number": 48
                },
                {
                    "label": "Lebanon",
                    "number": 44
                }
            ],
            "answer": "South Sudan",
            "answerValue": 178,
            "question": "Which country allowed the most peacekeepers into it last year?",
            "rowIndex": 4,
            "approved": true,
            "params": {
                "codes": "('0861')",
                "relation": "Actor1CountryCode",
                "year": 2015
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0861') THEN 1 ELSE 0 END) total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015 \nGROUP BY\n  codes.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  'userInput',\n  COUNT(*)\nFROM (\n  SELECT\n    events.GLOBALEVENTID,\n  FROM\n    [gdelt-bq:full.events] events\n  JOIN\n    [gdelt-bq:extra.countryinfo] codes\n  ON\n    events.Actor1CountryCode = codes.iso3\n  JOIN (\n    SELECT\n      *\n    FROM (\n      SELECT\n        sub,\n        obj AS alias,\n        CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n        SUM(input) OVER (PARTITION BY sub) AS input_alias\n      FROM\n        [fh-bigquery:freebase20140119.triples_lang_en]\n      WHERE\n        (pred = '/common/topic/alias'\n          OR pred = '/type/object/name'))\n    WHERE\n      input_alias > 0) aliases\n  ON\n    aliases.alias = codes.country\n  WHERE\n    Year = 2015\n    AND events.EventCode IN ('0861') \n  GROUP BY\n    events.GLOBALEVENTID)\n  IGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 380579334
        },
        {
            "top10": [
                {
                    "label": "United Kingdom",
                    "number": 29215
                },
                {
                    "label": "Indonesia",
                    "number": 27172
                },
                {
                    "label": "New Zealand",
                    "number": 26443
                },
                {
                    "label": "China",
                    "number": 23346
                },
                {
                    "label": "Canada",
                    "number": 14387
                },
                {
                    "label": "France",
                    "number": 12861
                },
                {
                    "label": "Japan",
                    "number": 11740
                },
                {
                    "label": "Malaysia",
                    "number": 8823
                },
                {
                    "label": "Syria",
                    "number": 7750
                },
                {
                    "label": "Iraq",
                    "number": 5816
                }
            ],
            "answer": "United Kingdom",
            "answerValue": 29215,
            "question": "Which country, other than the United States, was mentioned the most with Australia last year?",
            "rowIndex":5,
            "approved": true,
            "params": {
                "country": "Australia",
                "year": 2015,
                "filter_us": true
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'Australia' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'Australia' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761328085
        },
        {
            "top10": [
                {
                    "label": "Ivory Coast",
                    "number": 4.228673660242335
                },
                {
                    "label": "Guatemala",
                    "number": 3.5446125700346838
                },
                {
                    "label": "Guinea",
                    "number": 3.1391014322150284
                },
                {
                    "label": "Burkina Faso",
                    "number": 1.8883415435139572
                },
                {
                    "label": "Burundi",
                    "number": 1.857552276828362
                },
                {
                    "label": "Togo",
                    "number": 1.6151361329026304
                },
                {
                    "label": "Moldova",
                    "number": 1.5679323743949827
                },
                {
                    "label": "Honduras",
                    "number": 1.4513788098693758
                },
                {
                    "label": "Senegal",
                    "number": 1.2675036214389184
                },
                {
                    "label": "Antigua and Barbuda",
                    "number": 1.2619433928249504
                }
            ],
            "answer": "Ivory Coast",
            "answerValue": 4.228673660242335,
            "question": "Which country called for leadership change the most last year?",
            "rowIndex": 6,
            "approved": true,
            "params": {
                "codes": "('0241')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 1000,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0241') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0241') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 380579334
        },
        {
            "top10": [
                {
                    "label": "Russia",
                    "number": 19881
                },
                {
                    "label": "Israel",
                    "number": 19541
                },
                {
                    "label": "Libya",
                    "number": 11203
                },
                {
                    "label": "United Kingdom",
                    "number": 11135
                },
                {
                    "label": "Saudi Arabia",
                    "number": 10472
                },
                {
                    "label": "Sudan",
                    "number": 7880
                },
                {
                    "label": "France",
                    "number": 7825
                },
                {
                    "label": "Palestinian Territory",
                    "number": 7749
                },
                {
                    "label": "Syria",
                    "number": 6826
                },
                {
                    "label": "Canada",
                    "number": 6261
                }
            ],
            "answer": "Russia",
            "answerValue": 19881,
            "question": "Which country, other than the United States, was mentioned with Egypt the most last year?",
            "rowIndex": 7,
            "approved": true,
            "params": {
                "country": "Egypt",
                "year": 2015,
                "filter_us": true
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'Egypt' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'Egypt' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761320874
        },
        {
            "top10": [
                {
                    "label": "Brazil",
                    "number": 1.5230109029662877
                },
                {
                    "label": "Grenada",
                    "number": 1.036699149906697
                },
                {
                    "label": "Switzerland",
                    "number": 1.0303592317156693
                },
                {
                    "label": "Bangladesh",
                    "number": 0.9906644444703442
                },
                {
                    "label": "Zimbabwe",
                    "number": 0.6752080484799379
                },
                {
                    "label": "Lithuania",
                    "number": 0.669882100750268
                },
                {
                    "label": "Chile",
                    "number": 0.5642279480910288
                },
                {
                    "label": "Chad",
                    "number": 0.561955605507165
                },
                {
                    "label": "Rwanda",
                    "number": 0.4202828503582911
                },
                {
                    "label": "Nepal",
                    "number": 0.3592760587416356
                }
            ],
            "answer": "Brazil",
            "answerValue": 1.5230109029662877,
            "question": "Which country willingly shared the most intelligence last year?",
            "rowIndex": 8,
            "approved": true,
            "params": {
                "codes": "('0314')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 10000,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0314') THEN 1 ELSE 0 END) * 10000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0314') THEN 1 ELSE 0 END) * 10000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events per 10,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 380579334
        },
        {
            "top10": [
                {
                    "label": "United States",
                    "number": 45173
                },
                {
                    "label": "United Kingdom",
                    "number": 6701
                },
                {
                    "label": "Pakistan",
                    "number": 4665
                },
                {
                    "label": "Israel",
                    "number": 4443
                },
                {
                    "label": "China",
                    "number": 4442
                },
                {
                    "label": "Nigeria",
                    "number": 4421
                },
                {
                    "label": "Egypt",
                    "number": 4144
                },
                {
                    "label": "France",
                    "number": 4133
                },
                {
                    "label": "Afghanistan",
                    "number": 3646
                },
                {
                    "label": "Russia",
                    "number": 3565
                }
            ],
            "answer": "United States",
            "answerValue": 45173,
            "question": "Which country released the most people from prison last year?",
            "rowIndex": 9,
            "approved": true,
            "params": {
                "codes": "('0841')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 100,
                "min_events": 3000
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0841') THEN 1 ELSE 0 END) total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015 \nGROUP BY\n  codes.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  'userInput',\n  COUNT(*)\nFROM (\n  SELECT\n    events.GLOBALEVENTID,\n  FROM\n    [gdelt-bq:full.events] events\n  JOIN\n    [gdelt-bq:extra.countryinfo] codes\n  ON\n    events.Actor1CountryCode = codes.iso3\n  JOIN (\n    SELECT\n      *\n    FROM (\n      SELECT\n        sub,\n        obj AS alias,\n        CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n        SUM(input) OVER (PARTITION BY sub) AS input_alias\n      FROM\n        [fh-bigquery:freebase20140119.triples_lang_en]\n      WHERE\n        (pred = '/common/topic/alias'\n          OR pred = '/type/object/name'))\n    WHERE\n      input_alias > 0) aliases\n  ON\n    aliases.alias = codes.country\n  WHERE\n    Year = 2015\n    AND events.EventCode IN ('0841') \n  GROUP BY\n    events.GLOBALEVENTID)\n  IGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 380579334
        },
        {
            "top10": [
                {
                    "label": "China",
                    "number": 23087
                },
                {
                    "label": "Russia",
                    "number": 12343
                },
                {
                    "label": "Iran",
                    "number": 9079
                },
                {
                    "label": "Australia",
                    "number": 8981
                },
                {
                    "label": "United Kingdom",
                    "number": 8428
                },
                {
                    "label": "Canada",
                    "number": 8078
                },
                {
                    "label": "Japan",
                    "number": 7759
                },
                {
                    "label": "Vietnam",
                    "number": 5573
                },
                {
                    "label": "Turkey",
                    "number": 5503
                },
                {
                    "label": "Germany",
                    "number": 4727
                }
            ],
            "answer": "China",
            "answerValue": 23087,
            "question": "Which country, besides the United States, provided the most economic support to other countries last year?",
            "rowIndex": 10,
            "approved": true,
            "params": {
                "codes": "('061')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 100,
                "filter_us": true
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('061') THEN 1 ELSE 0 END) total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015 \n  AND codes.country != 'United States'\nGROUP BY\n  codes.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  'userInput',\n  COUNT(*)\nFROM (\n  SELECT\n    events.GLOBALEVENTID,\n  FROM\n    [gdelt-bq:full.events] events\n  JOIN\n    [gdelt-bq:extra.countryinfo] codes\n  ON\n    events.Actor1CountryCode = codes.iso3\n  JOIN (\n    SELECT\n      *\n    FROM (\n      SELECT\n        sub,\n        obj AS alias,\n        CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n        SUM(input) OVER (PARTITION BY sub) AS input_alias\n      FROM\n        [fh-bigquery:freebase20140119.triples_lang_en]\n      WHERE\n        (pred = '/common/topic/alias'\n          OR pred = '/type/object/name'))\n    WHERE\n      input_alias > 0) aliases\n  ON\n    aliases.alias = codes.country\n  WHERE\n    Year = 2015\n    AND events.EventCode IN ('061') \n  AND codes.country != 'United States'\n  GROUP BY\n    events.GLOBALEVENTID)\n  IGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 380579150
        },
        {
            "top10": [
                {
                    "label": "Russia",
                    "number": 73351
                },
                {
                    "label": "Turkey",
                    "number": 62594
                },
                {
                    "label": "Iraq",
                    "number": 42881
                },
                {
                    "label": "Iran",
                    "number": 31910
                },
                {
                    "label": "United Kingdom",
                    "number": 30126
                },
                {
                    "label": "Lebanon",
                    "number": 27233
                },
                {
                    "label": "Israel",
                    "number": 21384
                },
                {
                    "label": "France",
                    "number": 19670
                },
                {
                    "label": "Jordan",
                    "number": 12994
                },
                {
                    "label": "Saudi Arabia",
                    "number": 12682
                }
            ],
            "answer": "Russia",
            "answerValue": 73351,
            "question": "Which country, other than the United States, was mentioned with Syria the most last year?",
            "rowIndex": 11,
            "approved": true,
            "params": {
                "country": "Syria",
                "year": 2015,
                "filter_us": true
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'Syria' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'Syria' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761323284
        },
        {
            "top10": [
                {
                    "label": "Madagascar",
                    "number": 4.0657919053779334
                },
                {
                    "label": "Japan",
                    "number": 3.689461650384535
                },
                {
                    "label": "Mozambique",
                    "number": 3.173963423850068
                },
                {
                    "label": "Bolivia",
                    "number": 3.013056578506863
                },
                {
                    "label": "Turkey",
                    "number": 2.0064966318776682
                },
                {
                    "label": "Colombia",
                    "number": 1.8706805466544265
                },
                {
                    "label": "Samoa",
                    "number": 1.7812082529315718
                },
                {
                    "label": "Trinidad and Tobago",
                    "number": 1.7371409202609949
                },
                {
                    "label": "Armenia",
                    "number": 1.7288949405188476
                },
                {
                    "label": "South Korea",
                    "number": 1.6694584658969545
                }
            ],
            "answer": "Madagascar",
            "answerValue": 4.0657919053779334,
            "question": "Which country was apologized to the most last year?",
            "rowIndex": 12,
            "approved": true,
            "params": {
                "codes": "('055')",
                "relation": "Actor2CountryCode",
                "year": 2015,
                "per": 1000,
                "min_events": 1000
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('055') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor2CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1000\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('055') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor2CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1000\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 380820594
        },
        {
            "top10": [
                {
                    "label": "Bolivia",
                    "number": 3.6363636363636362
                },
                {
                    "label": "Central African Republic",
                    "number": 2.4839577727178637
                },
                {
                    "label": "Democratic Republic of the Congo",
                    "number": 1.9504160887656032
                },
                {
                    "label": "Gambia",
                    "number": 1.9478635666625224
                },
                {
                    "label": "Benin",
                    "number": 1.7112299465240641
                },
                {
                    "label": "Panama",
                    "number": 1.5096238520568626
                },
                {
                    "label": "Senegal",
                    "number": 1.3882182520521487
                },
                {
                    "label": "Niger",
                    "number": 1.2780617915092243
                },
                {
                    "label": "Nigeria",
                    "number": 1.2008525023884766
                },
                {
                    "label": "Colombia",
                    "number": 1.129214389417648
                }
            ],
            "answer": "Bolivia",
            "answerValue": 3.6363636363636362,
            "question": "Which country was the most forgiving last year?",
            "rowIndex": 13,
            "approved": true,
            "params": {
                "codes": "('056')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 1000,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('056') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('056') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "Reddit",
            "units": "Events per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 380821141
        },
        {
            "top10": [
                {
                    "label": "Cuba",
                    "number": 1.0214154878542856
                },
                {
                    "label": "Antigua and Barbuda",
                    "number": 0.360555255092843
                },
                {
                    "label": "North Korea",
                    "number": 0.35664834473209417
                },
                {
                    "label": "Libya",
                    "number": 0.3126029688833315
                },
                {
                    "label": "Ukraine",
                    "number": 0.21360039218432664
                },
                {
                    "label": "Ecuador",
                    "number": 0.1377676135893974
                },
                {
                    "label": "Venezuela",
                    "number": 0.11956001912960305
                },
                {
                    "label": "Chile",
                    "number": 0.0940379913485048
                },
                {
                    "label": "Slovakia",
                    "number": 0.08411490095470413
                },
                {
                    "label": "Sudan",
                    "number": 0.08228674874769855
                }
            ],
            "answer": "Cuba",
            "answerValue": 1.0214154878542856,
            "question": "Which country asked to ease economic sanctions the most last year?",
            "rowIndex": 14,
            "approved": true,
            "params": {
                "codes": "('0254')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 1000,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0254') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0254') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 380579334
        },
        {
            "top10": [
                {
                    "label": "United Kingdom",
                    "number": 148231
                },
                {
                    "label": "China",
                    "number": 129654
                },
                {
                    "label": "Iran",
                    "number": 113828
                },
                {
                    "label": "Russia",
                    "number": 110351
                },
                {
                    "label": "Canada",
                    "number": 105030
                },
                {
                    "label": "France",
                    "number": 104969
                },
                {
                    "label": "Israel",
                    "number": 86381
                },
                {
                    "label": "Cuba",
                    "number": 77636
                },
                {
                    "label": "Mexico",
                    "number": 75061
                },
                {
                    "label": "Iraq",
                    "number": 65497
                }
            ],
            "answer": "United Kingdom",
            "answerValue": 148231,
            "question": "Which country was mentioned the most with the United States last year?",
            "rowIndex": 15,
            "approved": true,
            "params": {
                "country": "United States",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'United States' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'United States' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761343835
        },
        {
            "top10": [
                {
                    "label": "Canada",
                    "number": 7762
                },
                {
                    "label": "Spain",
                    "number": 4528
                },
                {
                    "label": "Cuba",
                    "number": 2996
                },
                {
                    "label": "Australia",
                    "number": 2966
                },
                {
                    "label": "United Kingdom",
                    "number": 2567
                },
                {
                    "label": "China",
                    "number": 2505
                },
                {
                    "label": "France",
                    "number": 2300
                },
                {
                    "label": "Chile",
                    "number": 1986
                },
                {
                    "label": "Brazil",
                    "number": 1785
                },
                {
                    "label": "Colombia",
                    "number": 1732
                }
            ],
            "answer": "Canada",
            "answerValue": 7762,
            "question": "Which country, besides the United States, was mentioned with Mexico the most last year?",
            "rowIndex": 16,
            "approved": true,
            "params": {
                "country": "Mexico",
                "year": 2015,
                "filter_us": true
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'Mexico' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'Mexico' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761317762
        },
        {
            "top10": [
                {
                    "label": "Haiti",
                    "number": 5.0675675675675675
                },
                {
                    "label": "Macao",
                    "number": 4.459308807134894
                },
                {
                    "label": "Nepal",
                    "number": 3.646651996227601
                },
                {
                    "label": "Saint Vincent and the Grenadines",
                    "number": 3.5655512890839276
                },
                {
                    "label": "Malawi",
                    "number": 2.5917199596095593
                },
                {
                    "label": "Papua New Guinea",
                    "number": 2.332814930015552
                },
                {
                    "label": "Kiribati",
                    "number": 2.0796197266785503
                },
                {
                    "label": "Tanzania",
                    "number": 2.065867062457379
                },
                {
                    "label": "Nicaragua",
                    "number": 2.061105722599418
                },
                {
                    "label": "United States",
                    "number": 1.877092553721561
                }
            ],
            "answer": "Haiti",
            "answerValue": 5.0675675675675675,
            "question": "Which country appealed the most for economic aid last year?",
            "rowIndex": 17,
            "approved": true,
            "params": {
                "codes": "('0231')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 1000,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0231') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('0231') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 380579334
        },
        {
            "top10": [
                {
                    "label": "Pakistan",
                    "number": 24881
                },
                {
                    "label": "United States",
                    "number": 10570
                },
                {
                    "label": "China",
                    "number": 7851
                },
                {
                    "label": "Bangladesh",
                    "number": 6869
                },
                {
                    "label": "United Kingdom",
                    "number": 6552
                },
                {
                    "label": "Nepal",
                    "number": 4762
                },
                {
                    "label": "Sri Lanka",
                    "number": 3572
                },
                {
                    "label": "Japan",
                    "number": 3018
                },
                {
                    "label": "France",
                    "number": 2876
                },
                {
                    "label": "Senegal",
                    "number": 2366
                }
            ],
            "answer": "Pakistan",
            "answerValue": 24881,
            "question": "Which country was mentioned the most in the news with India last year?",
            "rowIndex": 18,
            "approved": true,
            "params": {
                "country": "India",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'India' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'India' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761318140
        },
        {
            "top10": [
                {
                    "label": "VimL",
                    "number": 1.3683470025050617
                },
                {
                    "label": "Emacs Lisp",
                    "number": 1.36659288644956
                },
                {
                    "label": "ActionScript",
                    "number": 1.1540633333470722
                },
                {
                    "label": "Haskell",
                    "number": 0.822435923228584
                },
                {
                    "label": "Lua",
                    "number": 0.7791170117712977
                },
                {
                    "label": "Rust",
                    "number": 0.7431195095411237
                },
                {
                    "label": "Prolog",
                    "number": 0.6849445385186171
                },
                {
                    "label": "Julia",
                    "number": 0.665513110608279
                },
                {
                    "label": "C",
                    "number": 0.643897128621242
                },
                {
                    "label": "Assembly",
                    "number": 0.6436404302736276
                }
            ],
            "answer": "VimL",
            "answerValue": 1.3683470025050617,
            "question": "Which programming language has the angriest developers?",
            "rowIndex": 19,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(a+rgh|angry|annoyed|annoying|appalled|bitter|cranky|hate|hating|mad)\\b",
                "per": 1000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(a+rgh|angry|annoyed|annoying|appalled|bitter|cranky|hate|hating|mad)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(a+rgh|angry|annoyed|annoying|appalled|bitter|cranky|hate|hating|mad)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "VHDL",
                    "number": 7.548594074353652
                },
                {
                    "label": "Delphi",
                    "number": 7.1778920923555445
                },
                {
                    "label": "Objective-C",
                    "number": 6.425100073042776
                },
                {
                    "label": "Rust",
                    "number": 5.467236391623982
                },
                {
                    "label": "Logos",
                    "number": 5.1616455325957915
                },
                {
                    "label": "Processing",
                    "number": 4.68835813698043
                },
                {
                    "label": "Assembly",
                    "number": 4.6663931194838
                },
                {
                    "label": "OCaml",
                    "number": 4.4482113982411535
                },
                {
                    "label": "Puppet",
                    "number": 4.367725008033494
                },
                {
                    "label": "Lua",
                    "number": 4.326585958985291
                }
            ],
            "answer": "VHDL",
            "answerValue": 7.548594074353652,
            "question": "Which programming language has the most :( in its commit messages?",
            "rowIndex": 20,
            "approved": true,
            "params": {
                "regex": ":\\(",
                "per": 10000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r':\\(') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r':\\(') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 10,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Lua",
                    "number": 9.13390369119117
                },
                {
                    "label": "Visual Basic",
                    "number": 8.516327539788648
                },
                {
                    "label": "Logos",
                    "number": 7.398358596720635
                },
                {
                    "label": "ASP",
                    "number": 6.04182502095149
                },
                {
                    "label": "VHDL",
                    "number": 6.038875259482921
                },
                {
                    "label": "C#",
                    "number": 5.537934098584227
                },
                {
                    "label": "Racket",
                    "number": 5.523075679607727
                },
                {
                    "label": "ActionScript",
                    "number": 5.523017381018131
                },
                {
                    "label": "Assembly",
                    "number": 5.390488603541631
                },
                {
                    "label": "Processing",
                    "number": 5.224170495492478
                }
            ],
            "answer": "Lua",
            "answerValue": 9.13390369119117,
            "question": "Which programming language has the funniest developers?",
            "rowIndex": 21,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(ha(ha)+|he(he)+|lol|rofl|lmfao|lulz|lolz|rotfl|lawl|hilarious)\\b",
                "per": 10000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(ha(ha)+|he(he)+|lol|rofl|lmfao|lulz|lolz|rotfl|lawl|hilarious)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(ha(ha)+|he(he)+|lol|rofl|lmfao|lulz|lolz|rotfl|lawl|hilarious)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 10,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Assembly",
                    "number": 2.2929690328497982
                },
                {
                    "label": "Dart",
                    "number": 1.6831159675713783
                },
                {
                    "label": "Rust",
                    "number": 1.2526871732264657
                },
                {
                    "label": "Lua",
                    "number": 1.1852524753542082
                },
                {
                    "label": "Common Lisp",
                    "number": 1.0897903411043768
                },
                {
                    "label": "Visual Basic",
                    "number": 1.0805662899946888
                },
                {
                    "label": "Objective-C",
                    "number": 1.058565208993364
                },
                {
                    "label": "Processing",
                    "number": 1.0180434811728933
                },
                {
                    "label": "PHP",
                    "number": 0.9719433189762221
                },
                {
                    "label": "D",
                    "number": 0.9405237160836322
                }
            ],
            "answer": "Assembly",
            "answerValue": 2.2929690328497982,
            "question": "Which programming language has the happiest developers?",
            "rowIndex": 22,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(yes|yay|hallelujah|hurray|bingo|amused|cheerful|excited|glad|proud)\\b",
                "per": 1000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(yes|yay|hallelujah|hurray|bingo|amused|cheerful|excited|glad|proud)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(yes|yay|hallelujah|hurray|bingo|amused|cheerful|excited|glad|proud)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Rust",
                    "number": 24.303192759892777
                },
                {
                    "label": "Julia",
                    "number": 15.279071831048405
                },
                {
                    "label": "TypeScript",
                    "number": 12.84320523249783
                },
                {
                    "label": "Elixir",
                    "number": 11.44698208761109
                },
                {
                    "label": "Scala",
                    "number": 10.275948107578465
                },
                {
                    "label": "D",
                    "number": 10.079166384735098
                },
                {
                    "label": "ColdFusion",
                    "number": 9.726420798065297
                },
                {
                    "label": "OCaml",
                    "number": 9.609939949146124
                },
                {
                    "label": "XSLT",
                    "number": 8.625112024475417
                },
                {
                    "label": "Haxe",
                    "number": 8.485998885483422
                }
            ],
            "answer": "Rust",
            "answerValue": 24.303192759892777,
            "question": "Which programming language has the most issues per commit?",
            "rowIndex": 23,
            "approved": true,
            "sql": "SELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(#)\\d+') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per,\n  COUNT(*) AS total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE",
            "inputSQL": "SELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(#)\\d+') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per,\n  COUNT(*) AS total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\nAND\n  repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE",
            "databases": "GitHub",
            "units": "Issues per Commit",
            "hasPassingInputQuery": false,
            "rowsSearched": 290265729
        },
        {
            "top10": [
                {
                    "label": "Scheme",
                    "number": 1.2625526872948352
                },
                {
                    "label": "Prolog",
                    "number": 0.9513118590536349
                },
                {
                    "label": "Racket",
                    "number": 0.9429641404208314
                },
                {
                    "label": "Rust",
                    "number": 0.7961994745083468
                },
                {
                    "label": "Haskell",
                    "number": 0.7886371866575463
                },
                {
                    "label": "Common Lisp",
                    "number": 0.6706402099103858
                },
                {
                    "label": "OCaml",
                    "number": 0.6612206132520633
                },
                {
                    "label": "Emacs Lisp",
                    "number": 0.6003529443362229
                },
                {
                    "label": "Tcl",
                    "number": 0.5826374053214216
                },
                {
                    "label": "Arduino",
                    "number": 0.5362289697700918
                }
            ],
            "answer": "Scheme",
            "answerValue": 1.2625526872948352,
            "question": "Developers of which programming language are the most surprised?\n",
            "rowIndex": 24,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(yikes|gosh|baffled|stumped|surprised|shocked)\\b",
                "per": 10000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(yikes|gosh|baffled|stumped|surprised|shocked)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(yikes|gosh|baffled|stumped|surprised|shocked)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 10,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Java",
                    "number": 7.855307488416427
                },
                {
                    "label": "C",
                    "number": 5.791108550275308
                },
                {
                    "label": "Logos",
                    "number": 5.471344264551539
                },
                {
                    "label": "Haxe",
                    "number": 4.667038172192812
                },
                {
                    "label": "Rust",
                    "number": 4.081849305979458
                },
                {
                    "label": "Assembly",
                    "number": 3.7894330332359827
                },
                {
                    "label": "Delphi",
                    "number": 3.748454759341229
                },
                {
                    "label": "C++",
                    "number": 3.703491279020774
                },
                {
                    "label": "Objective-C",
                    "number": 3.0056325082533895
                },
                {
                    "label": "Groovy",
                    "number": 2.950961867992224
                }
            ],
            "answer": "Java",
            "answerValue": 7.855307488416427,
            "question": "Which programming language mentions Android the most?",
            "rowIndex": 25,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(android)\\b",
                "per": 1000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(android)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(android)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Pascal",
                    "number": 1.9103760711751543
                },
                {
                    "label": "Visual Basic",
                    "number": 1.7032655079577297
                },
                {
                    "label": "Logos",
                    "number": 1.6861375406479586
                },
                {
                    "label": "Delphi",
                    "number": 1.5352713641982694
                },
                {
                    "label": "Lua",
                    "number": 1.5300531954572505
                },
                {
                    "label": "Arduino",
                    "number": 1.501441115356257
                },
                {
                    "label": "Haxe",
                    "number": 1.4453886876567288
                },
                {
                    "label": "C#",
                    "number": 1.4402828606339584
                },
                {
                    "label": "F#",
                    "number": 1.3252018228286297
                },
                {
                    "label": "Swift",
                    "number": 1.3092387465761683
                }
            ],
            "answer": "Pascal",
            "answerValue": 1.9103760711751543,
            "question": "Which programming language has the most :) in its commit messages?",
            "rowIndex": 26,
            "approved": true,
            "params": {
                "regex": ":\\)",
                "per": 1000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r':\\)') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r':\\)') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Rust",
                    "number": 100.45897184107858
                },
                {
                    "label": "Delphi",
                    "number": 94.13893208916537
                },
                {
                    "label": "C",
                    "number": 90.85214012811262
                },
                {
                    "label": "C++",
                    "number": 77.05645593378424
                },
                {
                    "label": "Pascal",
                    "number": 74.0109710168659
                },
                {
                    "label": "Tcl",
                    "number": 72.36882889881531
                },
                {
                    "label": "Erlang",
                    "number": 68.4854651895884
                },
                {
                    "label": "Scala",
                    "number": 68.12409915012014
                },
                {
                    "label": "OCaml",
                    "number": 65.44993057183561
                },
                {
                    "label": "TypeScript",
                    "number": 64.09447868838139
                }
            ],
            "answer": "Rust",
            "answerValue": 100.45897184107858,
            "question": "Which programming language has the chattiest developers?",
            "rowIndex": 27,
            "approved": true,
            "sql": "SELECT\n  repository_language,\n  SUM(LENGTH(payload_commit_msg)) / COUNT(*) AS per,\n  COUNT(*) AS total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE",
            "inputSQL": "SELECT\n  repository_language,\n  SUM(LENGTH(payload_commit_msg)) / COUNT(*) AS per,\n  COUNT(*) AS total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\nAND\n  repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE",
            "databases": "GitHub",
            "units": "Characters per Commit",
            "hasPassingInputQuery": false,
            "rowsSearched": 290265729
        },
        {
            "top10": [
                {
                    "label": "D",
                    "number": 1.6780567020772719
                },
                {
                    "label": "Common Lisp",
                    "number": 0.2682560839641543
                },
                {
                    "label": "Logos",
                    "number": 0.15484936597787374
                },
                {
                    "label": "Emacs Lisp",
                    "number": 0.15324798842266743
                },
                {
                    "label": "Prolog",
                    "number": 0.13318366026750889
                },
                {
                    "label": "ASP",
                    "number": 0.11693854879260948
                },
                {
                    "label": "Scheme",
                    "number": 0.09711943748421809
                },
                {
                    "label": "Racket",
                    "number": 0.09429641404208314
                },
                {
                    "label": "Visual Basic",
                    "number": 0.07325873152506364
                },
                {
                    "label": "Processing",
                    "number": 0.06697654481400614
                }
            ],
            "answer": "D",
            "answerValue": 1.6780567020772719,
            "question": "Which programming language has the most ! in its commit messages?",
            "rowIndex": 28,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(!)+\\b",
                "per": 1000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(!)+\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(!)+\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "TypeScript",
                    "number": 1.146519766546737
                },
                {
                    "label": "XSLT",
                    "number": 1.1331211306488664
                },
                {
                    "label": "Lua",
                    "number": 0.8785787579548676
                },
                {
                    "label": "PowerShell",
                    "number": 0.7655575651441641
                },
                {
                    "label": "ASP",
                    "number": 0.6821415346235553
                },
                {
                    "label": "Delphi",
                    "number": 0.5981576743629621
                },
                {
                    "label": "Processing",
                    "number": 0.5358123585120491
                },
                {
                    "label": "Emacs Lisp",
                    "number": 0.5213591358709304
                },
                {
                    "label": "Scheme",
                    "number": 0.4855971874210905
                },
                {
                    "label": "Visual Basic",
                    "number": 0.4578670720316478
                }
            ],
            "answer": "TypeScript",
            "answerValue": 1.146519766546737,
            "question": "Developers of which programming language say 'newbie' or 'noob' the most?",
            "rowIndex": 29,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(newbie|noob|newb|n00b)\\b",
                "per": 10000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(newbie|noob|newb|n00b)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(newbie|noob|newb|n00b)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 10,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },

        {
            "top10": [
                {
                    "label": "JavaScript",
                    "number": 614417
                },
                {
                    "label": "Java",
                    "number": 420235
                },
                {
                    "label": "Ruby",
                    "number": 347799
                },
                {
                    "label": "PHP",
                    "number": 283669
                },
                {
                    "label": "Python",
                    "number": 255277
                },
                {
                    "label": "CSS",
                    "number": 234308
                },
                {
                    "label": "C++",
                    "number": 138008
                },
                {
                    "label": "C",
                    "number": 123359
                },
                {
                    "label": "C#",
                    "number": 114652
                },
                {
                    "label": "Objective-C",
                    "number": 100419
                }
            ],
            "answer": "JavaScript",
            "answerValue": 614417,
            "question": "Which programming language created the most new projects last year?",
            "rowIndex": 30,
            "approved": true,
            "sql": "SELECT\n  repository_language,\n  COUNT(UNIQUE(repository_name)) total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'CreateEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nORDER BY\n  total DESC",
            "inputSQL": "SELECT\n  repository_language,\n  COUNT(UNIQUE(repository_name)) total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'CreateEvent'\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nORDER BY\n  total DESC IGNORE CASE",
            "databases": "GitHub",
            "units": "Projects",
            "hasPassingInputQuery": false,
            "rowsSearched": 301619229
        },

        {
            "top10": [
                {
                    "label": "JavaScript",
                    "number": 1104776
                },
                {
                    "label": "Java",
                    "number": 723486
                },
                {
                    "label": "Ruby",
                    "number": 505549
                },
                {
                    "label": "PHP",
                    "number": 501839
                },
                {
                    "label": "Python",
                    "number": 492549
                },
                {
                    "label": "CSS",
                    "number": 452809
                },
                {
                    "label": "C++",
                    "number": 259818
                },
                {
                    "label": "C",
                    "number": 237922
                },
                {
                    "label": "C#",
                    "number": 204747
                },
                {
                    "label": "Objective-C",
                    "number": 168481
                }
            ],
            "answer": "JavaScript",
            "answerValue": 1104776,
            "question": "What's the most popular programming language?",
            "rowIndex": 31,
            "approved": true,
            "sql": "SELECT\n  repository_language,\n  COUNT(*) total\nFROM (\n  SELECT\n    repository_language,\n  FROM\n    [bigquery-public-data:samples.github_timeline]\n  WHERE\n    repository_language IS NOT NULL\n  GROUP BY\n    repository_language,\n    repository_name )\nGROUP BY\n  repository_language\nORDER BY\n  total DESC",
            "inputSQL": "SELECT\n  repository_language,\n  COUNT(*) total\nFROM (\n  SELECT\n    repository_language,\n  FROM\n    [bigquery-public-data:samples.github_timeline]\n  WHERE\n    LOWER(repository_language) = lower('userInput')\n  GROUP BY\n    repository_language,\n    repository_name )\nGROUP BY\n  repository_language\nORDER BY\n  total DESC",
            "databases": "GitHub",
            "units": "Repositories",
            "hasPassingInputQuery": false,
            "rowsSearched": 659325409
        },
        {
            "top10": [
                {
                    "label": "VimL",
                    "number": 3.8681206586680914
                },
                {
                    "label": "Erlang",
                    "number": 2.9549533540648603
                },
                {
                    "label": "Emacs Lisp",
                    "number": 2.8302319653326538
                },
                {
                    "label": "Objective-C",
                    "number": 2.6759304886809594
                },
                {
                    "label": "Puppet",
                    "number": 2.6059727711901624
                },
                {
                    "label": "TypeScript",
                    "number": 2.3388429752066116
                },
                {
                    "label": "C",
                    "number": 2.2952892304846158
                },
                {
                    "label": "JavaScript",
                    "number": 2.0826057471087447
                },
                {
                    "label": "Rust",
                    "number": 1.999796458375738
                },
                {
                    "label": "Go",
                    "number": 1.9978226315674876
                }
            ],
            "answer": "VimL",
            "answerValue": 3.8681206586680914,
            "question": "Which programming language has the most forked projects per repo?",
            "rowIndex": 32,
            "approved": true,
            "sql": "SELECT\n  repos.repository_language,\n  forks.total / repos.total per\nFROM (\n  SELECT\n    repository_language,\n    COUNT(*) total\n  FROM\n    [bigquery-public-data:samples.github_timeline]\n  WHERE\n    type = 'ForkEvent'\n  GROUP BY\n    repository_language) forks\nJOIN (\n  SELECT\n    repository_language,\n    COUNT(*) total\n  FROM (\n    SELECT\n      repository_language,\n    FROM\n      [bigquery-public-data:samples.github_timeline]\n    WHERE\n      repository_language IS NOT NULL\n    GROUP BY\n      repository_language,\n      repository_name)\n  GROUP BY\n    repository_language\n  HAVING\n    total > 4000) repos\nON\n  repos.repository_language = forks.repository_language\nORDER BY\n  per DESC IGNORE CASE",
            "inputSQL": "SELECT\n  repos.repository_language,\n  forks.total / repos.total per\nFROM (\n  SELECT\n    repository_language,\n    COUNT(*) total\n  FROM\n    [bigquery-public-data:samples.github_timeline]\n  WHERE\n    type = 'ForkEvent'\n  GROUP BY\n    repository_language) forks\nJOIN (\n  SELECT\n    repository_language,\n    COUNT(*) total\n  FROM (\n    SELECT\n      repository_language,\n    FROM\n      [bigquery-public-data:samples.github_timeline]\n    WHERE\n      repository_language IS NOT NULL\n    GROUP BY\n      repository_language,\n      repository_name)\n  GROUP BY\n    repository_language\n  HAVING\n    total > 4000) repos\nON\n  repos.repository_language = forks.repository_language\nWHERE\n  repos.repository_language = 'userInput'\nORDER BY\n  per DESC IGNORE CASE",
            "databases": "GitHub",
            "units": "Forks per Repo",
            "hasPassingInputQuery": false,
            "rowsSearched": 950109737
        },
        {
            "top10": [
                {
                    "label": "Rust",
                    "number": 4.166463166463166
                },
                {
                    "label": "TypeScript",
                    "number": 2.447021191523391
                },
                {
                    "label": "Emacs Lisp",
                    "number": 2.009770603228547
                },
                {
                    "label": "OCaml",
                    "number": 1.9814291481631006
                },
                {
                    "label": "Python",
                    "number": 1.7087741524193532
                },
                {
                    "label": "JavaScript",
                    "number": 1.7047546289926645
                },
                {
                    "label": "CoffeeScript",
                    "number": 1.7007732167435836
                },
                {
                    "label": "Dart",
                    "number": 1.6455081512313563
                },
                {
                    "label": "XSLT",
                    "number": 1.596614682388741
                },
                {
                    "label": "Scala",
                    "number": 1.5886149613797482
                }
            ],
            "answer": "Rust",
            "answerValue": 4.166463166463166,
            "question": "Which programming language has the most open issues per repo?",
            "rowIndex": 33,
            "approved": true,
            "sql": "SELECT\n  repos.repository_language,\n  (issues.total / repos.total) per\nFROM (\n  SELECT\n  repository_language,\n  COUNT(*) total\n  FROM \n    [bigquery-public-data:samples.github_timeline]\n  WHERE\n    type = 'IssuesEvent'\n  AND\n    repository_language IS NOT NULL\n  AND\n    payload_action = 'opened'\n  GROUP BY\n    repository_language) issues\nJOIN (\n  SELECT\n    repository_language,\n    COUNT(*) total\n  FROM (\n    SELECT\n      repository_language,\n    FROM\n      [bigquery-public-data:samples.github_timeline]\n    WHERE\n      repository_language IS NOT NULL\n    GROUP BY\n      repository_language,\n      repository_name)\n  GROUP BY\n    repository_language\n  HAVING\n    total > 4000) repos\nON\n  repos.repository_language = issues.repository_language\nORDER BY\n  per DESC\nLIMIT 10",
            "inputSQL": "SELECT\n  repos.repository_language,\n  (issues.total / repos.total) per\nFROM (\n  SELECT\n    repository_language,\n    COUNT(*) total\n  FROM\n    [bigquery-public-data:samples.github_timeline]\n  WHERE\n    type = 'IssuesEvent'\n    AND repository_language IS NOT NULL\n    AND payload_action = 'opened'\n  GROUP BY\n    repository_language) issues\nJOIN (\n  SELECT\n    repository_language,\n    COUNT(*) total\n  FROM (\n    SELECT\n      repository_language,\n    FROM\n      [bigquery-public-data:samples.github_timeline]\n    WHERE\n      repository_language IS NOT NULL\n    GROUP BY\n      repository_language,\n      repository_name)\n  GROUP BY\n    repository_language\n  HAVING\n    total > 4000) repos\nON\n  repos.repository_language = issues.repository_language\nWHERE\n  repos.repository_language = 'userInput'\nORDER BY\n  per DESC\nLIMIT\n  10 IGNORE CASE",
            "databases": "GitHub",
            "units": "Issues per Repo",
            "hasPassingInputQuery": false,
            "rowsSearched": 951221825
        },
        {
            "top10": [
                {
                    "label": "VimL",
                    "number": 67.93433705682371
                },
                {
                    "label": "Emacs Lisp",
                    "number": 53.77748513169074
                },
                {
                    "label": "Rust",
                    "number": 38.33842083842084
                },
                {
                    "label": "OCaml",
                    "number": 33.580742834073476
                },
                {
                    "label": "C++",
                    "number": 29.459579397886213
                },
                {
                    "label": "C",
                    "number": 28.616693706340733
                },
                {
                    "label": "Puppet",
                    "number": 28.149029595152367
                },
                {
                    "label": "Shell",
                    "number": 26.98446627805933
                },
                {
                    "label": "Python",
                    "number": 25.94098049128107
                },
                {
                    "label": "Erlang",
                    "number": 24.662372278987117
                }
            ],
            "answer": "VimL",
            "answerValue": 67.93433705682371,
            "question": "Which programming language has the most commits per repo?",
            "rowIndex": 34,
            "approved": true,
            "sql": "SELECT\n  repos.repository_language,\n  (commits.total / repos.total) per,\nFROM (\n  SELECT\n  repository_language,\n  COUNT(payload_commit_msg) total\n  FROM \n    [bigquery-public-data:samples.github_timeline]\n  WHERE\n    type = 'PushEvent'\n  AND\n    payload_commit_msg IS NOT NULL\n  AND\n    repository_language IS NOT NULL\n  GROUP BY\n    repository_language) commits\nJOIN (\n  SELECT\n    repository_language,\n    COUNT(*) total\n  FROM (\n    SELECT\n      repository_language,\n    FROM\n      [bigquery-public-data:samples.github_timeline]\n    WHERE\n      repository_language IS NOT NULL\n    GROUP BY\n      repository_language,\n      repository_name)\n  GROUP BY\n    repository_language\n  HAVING\n    total > 4000) repos\nON\n  repos.repository_language = commits.repository_language\nORDER BY\n  per DESC\nLIMIT 10",
            "inputSQL": "SELECT\n  repos.repository_language,\n  (commits.total / repos.total) per,\nFROM (\n  SELECT\n  repository_language,\n  COUNT(payload_commit_msg) total\n  FROM \n    [bigquery-public-data:samples.github_timeline]\n  WHERE\n    type = 'PushEvent'\n  AND\n    payload_commit_msg IS NOT NULL\n  AND\n    repository_language IS NOT NULL\n  GROUP BY\n    repository_language) commits\nJOIN (\n  SELECT\n    repository_language,\n    COUNT(*) total\n  FROM (\n    SELECT\n      repository_language,\n    FROM\n      [bigquery-public-data:samples.github_timeline]\n    WHERE\n      repository_language IS NOT NULL\n    GROUP BY\n      repository_language,\n      repository_name)\n  GROUP BY\n    repository_language\n  HAVING\n    total > 4000) repos\nON\n  repos.repository_language = commits.repository_language\nWHERE\n  lower(commits.repository_language) = lower('userInput')\nORDER BY\n  per DESC\nLIMIT 10",
            "databases": "GitHub",
            "units": "Commits per Repo",
            "hasPassingInputQuery": false,
            "rowsSearched": 924866961
        },

        {
            "top10": [
                {
                    "label": "Delphi",
                    "number": 6.924672010208558
                },
                {
                    "label": "Lua",
                    "number": 5.8757026557943925
                },
                {
                    "label": "Haxe",
                    "number": 5.438492616327668
                },
                {
                    "label": "Pascal",
                    "number": 5.063406291505195
                },
                {
                    "label": "C#",
                    "number": 4.816082688616006
                },
                {
                    "label": "ActionScript",
                    "number": 4.806673783390556
                },
                {
                    "label": "FORTRAN",
                    "number": 4.744844363354896
                },
                {
                    "label": "ColdFusion",
                    "number": 4.611925634824668
                },
                {
                    "label": "Common Lisp",
                    "number": 4.298803745525572
                },
                {
                    "label": "C++",
                    "number": 4.270688408831364
                }
            ],
            "answer": "Delphi",
            "answerValue": 6.924672010208558,
            "question": "Developers of which programming language say 'fixed' the most?",
            "rowIndex": 35,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(fixed)\\b",
                "per": 100,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(fixed)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(fixed)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "% of Commits",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Rust",
                    "number": 5.387616444173147
                },
                {
                    "label": "Lua",
                    "number": 4.744325292956285
                },
                {
                    "label": "C",
                    "number": 4.640348056947883
                },
                {
                    "label": "Haxe",
                    "number": 4.545137921426581
                },
                {
                    "label": "C++",
                    "number": 4.22177363355125
                },
                {
                    "label": "D",
                    "number": 4.012450098112186
                },
                {
                    "label": "OCaml",
                    "number": 4.0033902584170376
                },
                {
                    "label": "VHDL",
                    "number": 3.906397433478015
                },
                {
                    "label": "Common Lisp",
                    "number": 3.814266193865319
                },
                {
                    "label": "Logos",
                    "number": 3.802412209012233
                }
            ],
            "answer": "Rust",
            "answerValue": 5.387616444173147,
            "question": "Developers of which programming language say 'again' the most?",
            "rowIndex": 36,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(again)\\b",
                "per": 1000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(again)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(again)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "ColdFusion",
                    "number": 2.607315598548972
                },
                {
                    "label": "PHP",
                    "number": 2.2029709995813493
                },
                {
                    "label": "Puppet",
                    "number": 1.6378968780125602
                },
                {
                    "label": "Groovy",
                    "number": 1.5831470658704427
                },
                {
                    "label": "CoffeeScript",
                    "number": 1.018719677611806
                },
                {
                    "label": "Python",
                    "number": 0.928215593959367
                },
                {
                    "label": "Scala",
                    "number": 0.9256439132409351
                },
                {
                    "label": "PowerShell",
                    "number": 0.8516827912228825
                },
                {
                    "label": "Ruby",
                    "number": 0.7828175100985231
                },
                {
                    "label": "Haxe",
                    "number": 0.713987183059348
                }
            ],
            "answer": "ColdFusion",
            "answerValue": 2.607315598548972,
            "question": "Which programming language has the most hotfixes?",
            "rowIndex": 37,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(hotfix)\\b",
                "per": 1000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(hotfix)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(hotfix)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Haskell",
                    "number": 1.633605600933489
                },
                {
                    "label": "Racket",
                    "number": 1.5491553735485089
                },
                {
                    "label": "Erlang",
                    "number": 1.390615149058813
                },
                {
                    "label": "Common Lisp",
                    "number": 1.265833396205853
                },
                {
                    "label": "C",
                    "number": 1.2312476344050802
                },
                {
                    "label": "Perl",
                    "number": 1.210240533803809
                },
                {
                    "label": "Lua",
                    "number": 1.1885678668936606
                },
                {
                    "label": "ColdFusion",
                    "number": 1.1147218863361548
                },
                {
                    "label": "Scheme",
                    "number": 1.1071615873200862
                },
                {
                    "label": "CoffeeScript",
                    "number": 1.067122933012146
                }
            ],
            "answer": "Haskell",
            "answerValue": 1.633605600933489,
            "question": "Developers of which programming language say 'oops' the most?",
            "rowIndex": 38,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(oops)\\b",
                "per": 1000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(oops)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(oops)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Rust",
                    "number": 8.386634464821253
                },
                {
                    "label": "Logos",
                    "number": 6.021919788028423
                },
                {
                    "label": "ASP",
                    "number": 5.846927439630474
                },
                {
                    "label": "Visual Basic",
                    "number": 5.5859782787861025
                },
                {
                    "label": "Lua",
                    "number": 5.569857786279915
                },
                {
                    "label": "Racket",
                    "number": 5.523075679607727
                },
                {
                    "label": "Julia",
                    "number": 4.991348329562093
                },
                {
                    "label": "Common Lisp",
                    "number": 4.945971548089094
                },
                {
                    "label": "C",
                    "number": 4.739635114189663
                },
                {
                    "label": "VHDL",
                    "number": 4.529156444612191
                }
            ],
            "answer": "Rust",
            "answerValue": 8.386634464821253,
            "question": "Developers of which programming language say 'don't know' the most?",
            "rowIndex": 39,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(don\\'?t know|dunno)\\b",
                "per": 10000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(don\\'?t know|dunno)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(don\\'?t know|dunno)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 10,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Emacs Lisp",
                    "number": 2.117034066869839
                },
                {
                    "label": "FORTRAN",
                    "number": 2.100956488085365
                },
                {
                    "label": "VimL",
                    "number": 1.7944362467542867
                },
                {
                    "label": "ColdFusion",
                    "number": 1.700423216444982
                },
                {
                    "label": "Ruby",
                    "number": 1.6371991910210595
                },
                {
                    "label": "OCaml",
                    "number": 1.5628850858685133
                },
                {
                    "label": "PHP",
                    "number": 1.5353475863732802
                },
                {
                    "label": "Objective-C",
                    "number": 1.4430943495085709
                },
                {
                    "label": "R",
                    "number": 1.4395588144840556
                },
                {
                    "label": "JavaScript",
                    "number": 1.3254715971271585
                }
            ],
            "answer": "Emacs Lisp",
            "answerValue": 2.117034066869839,
            "question": "Which programming language fixes the most conflicts in its commits?",
            "rowIndex": 40,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(fix(ed)? conflict)\\b",
                "per": 10000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(fix(ed)? conflict)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(fix(ed)? conflict)\\b') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 10,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Dart",
                    "number": 1.3746915756080367
                },
                {
                    "label": "FORTRAN",
                    "number": 0.24326864598883174
                },
                {
                    "label": "Julia",
                    "number": 0.18856204800567905
                },
                {
                    "label": "C",
                    "number": 0.18109606742472434
                },
                {
                    "label": "Lua",
                    "number": 0.17074266428179502
                },
                {
                    "label": "Matlab",
                    "number": 0.14258134978912218
                },
                {
                    "label": "TypeScript",
                    "number": 0.14195006633435792
                },
                {
                    "label": "Delphi",
                    "number": 0.1395701240180245
                },
                {
                    "label": "Rust",
                    "number": 0.10085193343772393
                },
                {
                    "label": "OCaml",
                    "number": 0.09617754374575466
                }
            ],
            "answer": "Dart",
            "answerValue": 1.3746915756080367,
            "question": "Which programming language has the most +1s in its commits?",
            "rowIndex": 41,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(\\+1)\\b",
                "per": 1000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(\\+1)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(\\+1)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "R",
                    "number": 4.093581792460115
                },
                {
                    "label": "Matlab",
                    "number": 4.0464587070152875
                },
                {
                    "label": "FORTRAN",
                    "number": 3.892298335821308
                },
                {
                    "label": "TeX",
                    "number": 3.5821322341104027
                },
                {
                    "label": "Prolog",
                    "number": 2.7588043912555413
                },
                {
                    "label": "Arduino",
                    "number": 2.6208190897513237
                },
                {
                    "label": "Logos",
                    "number": 2.5980282514065483
                },
                {
                    "label": "Haxe",
                    "number": 2.05488994148788
                },
                {
                    "label": "Julia",
                    "number": 1.996539331824837
                },
                {
                    "label": "C#",
                    "number": 1.961676656047793
                }
            ],
            "answer": "R",
            "answerValue": 4.093581792460115,
            "question": "Which programming language commits the most minor changes?",
            "rowIndex": 42,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(minor changes?)\\b",
                "per": 1000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(minor changes?)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(minor changes?)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Swift",
                    "number": 5.975985805095695
                },
                {
                    "label": "Arduino",
                    "number": 5.256384476171325
                },
                {
                    "label": "VHDL",
                    "number": 5.0179279109265895
                },
                {
                    "label": "Processing",
                    "number": 4.360173067391799
                },
                {
                    "label": "R",
                    "number": 3.7554163400394964
                },
                {
                    "label": "Visual Basic",
                    "number": 3.377227523305434
                },
                {
                    "label": "PowerShell",
                    "number": 3.299553105771347
                },
                {
                    "label": "Objective-C",
                    "number": 3.22591531034299
                },
                {
                    "label": "Go",
                    "number": 2.9125469939111213
                },
                {
                    "label": "Elixir",
                    "number": 2.823812245058821
                }
            ],
            "answer": "Swift",
            "answerValue": 5.975985805095695,
            "question": "Developers of which programming language update their READMEs the most?",
            "rowIndex": 43,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(update readme)\\b",
                "per": 100,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(update readme)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(update readme)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "% of Commits",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Rust",
                    "number": 2.0807346267151465
                },
                {
                    "label": "C",
                    "number": 1.8763197577865802
                },
                {
                    "label": "Racket",
                    "number": 1.562626289840235
                },
                {
                    "label": "Common Lisp",
                    "number": 1.492174467050608
                },
                {
                    "label": "OCaml",
                    "number": 1.4546853491545393
                },
                {
                    "label": "Assembly",
                    "number": 1.4240544519804013
                },
                {
                    "label": "Emacs Lisp",
                    "number": 1.2670606877832915
                },
                {
                    "label": "Go",
                    "number": 1.2528212085632533
                },
                {
                    "label": "C++",
                    "number": 1.2343664445686766
                },
                {
                    "label": "D",
                    "number": 1.2111780228702889
                }
            ],
            "answer": "Rust",
            "answerValue": 2.0807346267151465,
            "question": "Developers of which programming language call out hacks the most?",
            "rowIndex": 44,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(hack|hacks)\\b",
                "per": 1000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(hack|hacks)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(hack|hacks)\\b') THEN 1 ELSE 0 END) * 1000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Elixir",
                    "number": 1.1646008631052083
                },
                {
                    "label": "Clojure",
                    "number": 1.1387549583379672
                },
                {
                    "label": "Haskell",
                    "number": 0.9383173057578562
                },
                {
                    "label": "CoffeeScript",
                    "number": 0.9358713148800613
                },
                {
                    "label": "F#",
                    "number": 0.8356884964368297
                },
                {
                    "label": "Ruby",
                    "number": 0.7384274701770243
                },
                {
                    "label": "Tcl",
                    "number": 0.7088755098077296
                },
                {
                    "label": "Dart",
                    "number": 0.6106802960874163
                },
                {
                    "label": "Puppet",
                    "number": 0.5016644152084184
                },
                {
                    "label": "Scala",
                    "number": 0.45816122028916073
                }
            ],
            "answer": "Elixir",
            "answerValue": 1.1646008631052083,
            "question": "Which programming language bumps versions the most?",
            "rowIndex": 45,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(bump.*version)\\b",
                "per": 100,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(bump.*version)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(bump.*version)\\b') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "% of Commits",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Australia",
                    "number": 26443
                },
                {
                    "label": "United States",
                    "number": 10687
                },
                {
                    "label": "United Kingdom",
                    "number": 6463
                },
                {
                    "label": "China",
                    "number": 5175
                },
                {
                    "label": "Canada",
                    "number": 2849
                },
                {
                    "label": "France",
                    "number": 2652
                },
                {
                    "label": "Japan",
                    "number": 2172
                },
                {
                    "label": "Iraq",
                    "number": 1649
                },
                {
                    "label": "Vietnam",
                    "number": 1377
                },
                {
                    "label": "Turkey",
                    "number": 1338
                }
            ],
            "answer": "Australia",
            "answerValue": 26443,
            "question": "Which country was mentioned with New Zealand the most last year?",
            "rowIndex": 46,
            "approved": true,
            "params": {
                "country": "New Zealand",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'New Zealand' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'New Zealand' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761317497
        },
        {
            "top10": [
                {
                    "label": "United States",
                    "number": 129654
                },
                {
                    "label": "Japan",
                    "number": 50486
                },
                {
                    "label": "Russia",
                    "number": 48841
                },
                {
                    "label": "United Kingdom",
                    "number": 37946
                },
                {
                    "label": "Pakistan",
                    "number": 28558
                },
                {
                    "label": "Taiwan",
                    "number": 26521
                },
                {
                    "label": "Australia",
                    "number": 23346
                },
                {
                    "label": "France",
                    "number": 23058
                },
                {
                    "label": "South Korea",
                    "number": 22825
                },
                {
                    "label": "Philippines",
                    "number": 21712
                }
            ],
            "answer": "United States",
            "answerValue": 129654,
            "question": "Which country was mentioned with China the most last year?",
            "rowIndex": 47,
            "approved": true,
            "params": {
                "country": "China",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'China' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'China' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761334193
        },
        {
            "top10": [
                {
                    "label": "South Korea",
                    "number": 30196
                },
                {
                    "label": "United States",
                    "number": 13973
                },
                {
                    "label": "China",
                    "number": 13124
                },
                {
                    "label": "Russia",
                    "number": 4929
                },
                {
                    "label": "Japan",
                    "number": 4468
                },
                {
                    "label": "Iran",
                    "number": 3459
                },
                {
                    "label": "Canada",
                    "number": 1661
                },
                {
                    "label": "United Kingdom",
                    "number": 781
                },
                {
                    "label": "Cuba",
                    "number": 630
                },
                {
                    "label": "Pakistan",
                    "number": 521
                }
            ],
            "answer": "South Korea",
            "answerValue": 30196,
            "question": "Which country was mentioned with North Korea the most last year?",
            "rowIndex": 48,
            "approved": true,
            "params": {
                "country": "North Korea",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'North Korea' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'North Korea' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761310688
        },
        
        {
            "top10": [
                {
                    "label": "United Kingdom",
                    "number": 4002
                },
                {
                    "label": "Nigeria",
                    "number": 2713
                },
                {
                    "label": "China",
                    "number": 2376
                },
                {
                    "label": "Australia",
                    "number": 2163
                },
                {
                    "label": "Zimbabwe",
                    "number": 1794
                },
                {
                    "label": "Mozambique",
                    "number": 1071
                },
                {
                    "label": "Sudan",
                    "number": 1047
                },
                {
                    "label": "France",
                    "number": 914
                },
                {
                    "label": "Israel",
                    "number": 913
                },
                {
                    "label": "Namibia",
                    "number": 635
                }
            ],
            "answer": "United Kingdom",
            "answerValue": 4002,
            "question": "Which country, besides the United States, was mentioned with South Africa the most last year?",
            "rowIndex": 49,
            "approved": true,
            "params": {
                "country": "South Africa",
                "year": 2015,
                "filter_us": true
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'South Africa' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'South Africa' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761314911
        },
        {
            "top10": [
                {
                    "label": "Germany",
                    "number": 24092
                },
                {
                    "label": "Turkey",
                    "number": 17854
                },
                {
                    "label": "Russia",
                    "number": 10558
                },
                {
                    "label": "Belgium",
                    "number": 9776
                },
                {
                    "label": "France",
                    "number": 9434
                },
                {
                    "label": "Italy",
                    "number": 8283
                },
                {
                    "label": "United Kingdom",
                    "number": 8254
                },
                {
                    "label": "Cyprus",
                    "number": 7171
                },
                {
                    "label": "Syria",
                    "number": 5258
                },
                {
                    "label": "Albania",
                    "number": 4805
                }
            ],
            "answer": "Germany",
            "answerValue": 24092,
            "question": "Which country, besides the United States, was mentioned with Greece the most last year?",
            "rowIndex": 50,
            "approved": true,
            "params": {
                "country": "Greece",
                "year": 2015,
                "filter_us": true
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'Greece' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'Greece' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761319545
        },
        {
            "top10": [
                {
                    "label": "China",
                    "number": 5591
                },
                {
                    "label": "Argentina",
                    "number": 2772
                },
                {
                    "label": "United Kingdom",
                    "number": 2526
                },
                {
                    "label": "Indonesia",
                    "number": 2342
                },
                {
                    "label": "Russia",
                    "number": 2118
                },
                {
                    "label": "France",
                    "number": 1955
                },
                {
                    "label": "Australia",
                    "number": 1839
                },
                {
                    "label": "Mexico",
                    "number": 1785
                },
                {
                    "label": "Chile",
                    "number": 1681
                },
                {
                    "label": "Spain",
                    "number": 1632
                }
            ],
            "answer": "China",
            "answerValue": 5591,
            "question": "Which country, besides the United States, was mentioned with Brazil the most last year?",
            "rowIndex": 51,
            "approved": true,
            "params": {
                "country": "Brazil",
                "year": 2015,
                "filter_us": true
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'Brazil' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'Brazil' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761318228
        },
        {
            "top10": [
                {
                    "label": "Syria",
                    "number": 62594
                },
                {
                    "label": "Russia",
                    "number": 55527
                },
                {
                    "label": "United States",
                    "number": 35808
                },
                {
                    "label": "Iraq",
                    "number": 23955
                },
                {
                    "label": "Armenia",
                    "number": 19014
                },
                {
                    "label": "Greece",
                    "number": 17854
                },
                {
                    "label": "Iran",
                    "number": 13959
                },
                {
                    "label": "United Kingdom",
                    "number": 11976
                },
                {
                    "label": "Israel",
                    "number": 10927
                },
                {
                    "label": "France",
                    "number": 10570
                }
            ],
            "answer": "Syria",
            "answerValue": 62594,
            "question": "Which country was mentioned with Turkey the most last year?",
            "rowIndex": 52,
            "approved": true,
            "params": {
                "country": "Turkey",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'Turkey' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'Turkey' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761323980
        },
        {
            "top10": [
                {
                    "label": "Norway",
                    "number": 1186
                },
                {
                    "label": "United Kingdom",
                    "number": 988
                },
                {
                    "label": "Denmark",
                    "number": 659
                },
                {
                    "label": "Sweden",
                    "number": 464
                },
                {
                    "label": "Canada",
                    "number": 453
                },
                {
                    "label": "Russia",
                    "number": 430
                },
                {
                    "label": "Finland",
                    "number": 417
                },
                {
                    "label": "Israel",
                    "number": 360
                },
                {
                    "label": "France",
                    "number": 303
                },
                {
                    "label": "Japan",
                    "number": 296
                }
            ],
            "answer": "Norway",
            "answerValue": 1186,
            "question": "Which country, besides the United States, was mentioned with Iceland the most last year?",
            "rowIndex": 53,
            "approved": true,
            "params": {
                "country": "Iceland",
                "year": 2015,
                "filter_us": true
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'Iceland' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'Iceland' \n  AND other.country != 'United States'\nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761308189
        },
            {
            "top10": [
                {
                    "label": "Djibouti",
                    "number": 25.3639846743295
                },
                {
                    "label": "Cape Verde",
                    "number": 23.431635388739945
                },
                {
                    "label": "Saint Helena",
                    "number": 19.78319783197832
                },
                {
                    "label": "Macao",
                    "number": 18.06020066889632
                },
                {
                    "label": "Paraguay",
                    "number": 18.03009339328952
                },
                {
                    "label": "Dominican Republic",
                    "number": 16.598422051333266
                },
                {
                    "label": "Aruba",
                    "number": 16.597510373443985
                },
                {
                    "label": "Palau",
                    "number": 15.908301493574157
                },
                {
                    "label": "Seychelles",
                    "number": 15.890206329941181
                },
                {
                    "label": "Sao Tome and Principe",
                    "number": 15.538847117794486
                }
            ],
            "answer": "Djibouti",
            "answerValue": 25.3639846743295,
            "question": "Which country was the most hospitable to visiting officials last year?",
            "rowIndex": 54,
            "approved": true,
            "params": {
                "codes": "('043')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 100,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('043') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('043') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "% of Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 380579334
        },
        
        {
            "top10": [
                {
                    "label": "Go",
                    "number": 2.9694171023735403
                },
                {
                    "label": "Erlang",
                    "number": 2.8100513374763576
                },
                {
                    "label": "Scala",
                    "number": 2.7097304251783814
                },
                {
                    "label": "Emacs Lisp",
                    "number": 2.606795679354652
                },
                {
                    "label": "Rust",
                    "number": 2.54783831842671
                },
                {
                    "label": "Haskell",
                    "number": 2.2854383776606446
                },
                {
                    "label": "Ruby",
                    "number": 2.282795779232972
                },
                {
                    "label": "Clojure",
                    "number": 2.267914892132298
                },
                {
                    "label": "D",
                    "number": 2.2328980309899182
                },
                {
                    "label": "Dart",
                    "number": 2.2030313711667255
                }
            ],
            "answer": "Go",
            "answerValue": 2.9694171023735403,
            "question": "Developers of which programming language clean up their comments the most?",
            "rowIndex": 55,
            "approved": true,
            "params": {
                "regex": "remove comment",
                "per": 10000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'remove comment') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'remove comment') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 10,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Nauru",
                    "number": 3.2859832277939414
                },
                {
                    "label": "Vanuatu",
                    "number": 2.6664702416028283
                },
                {
                    "label": "Botswana",
                    "number": 2.610099951988128
                },
                {
                    "label": "Zambia",
                    "number": 2.593852948629765
                },
                {
                    "label": "Burundi",
                    "number": 2.5023882814987792
                },
                {
                    "label": "Estonia",
                    "number": 2.423284604240748
                },
                {
                    "label": "Ghana",
                    "number": 2.378803769013764
                },
                {
                    "label": "Guinea-Bissau",
                    "number": 2.261221734728316
                },
                {
                    "label": "Australia",
                    "number": 2.257467803139979
                },
                {
                    "label": "New Zealand",
                    "number": 2.250073006911321
                }
            ],
            "answer": "Nauru",
            "answerValue": 3.2859832277939414,
            "question": "Officials of which country made the most pessimistic statements last year?",
            "rowIndex": 56,
            "approved": true,
            "params": {
                "codes": "('012')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 100,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('012') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('012') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "% of Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 380821141
        },
        {
            "top10": [
                {
                    "label": "Antigua and Barbuda",
                    "number": 3.7137191274562826
                },
                {
                    "label": "Luxembourg",
                    "number": 3.6345156315715688
                },
                {
                    "label": "Georgia",
                    "number": 3.5460992907801416
                },
                {
                    "label": "Comoros",
                    "number": 3.4870641169853767
                },
                {
                    "label": "Papua New Guinea",
                    "number": 3.439406627587032
                },
                {
                    "label": "Anguilla",
                    "number": 3.4033309196234613
                },
                {
                    "label": "Madagascar",
                    "number": 3.1140350877192984
                },
                {
                    "label": "Cook Islands",
                    "number": 3.056768558951965
                },
                {
                    "label": "Trinidad and Tobago",
                    "number": 3.055904522613065
                },
                {
                    "label": "Burkina Faso",
                    "number": 2.9885057471264367
                }
            ],
            "answer": "Antigua and Barbuda",
            "answerValue": 3.7137191274562826,
            "question": "Officials of which country made the most optimistic statements last year?",
            "rowIndex": 57,
            "approved": true,
            "params": {
                "codes": "('013')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 100,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('013') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('013') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "% of Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 380821141
        },
        {
            "top10": [
                {
                    "label": "Scala",
                    "number": 2.0765206194226975
                },
                {
                    "label": "F#",
                    "number": 1.8972022014577221
                },
                {
                    "label": "Go",
                    "number": 1.7185894953984528
                },
                {
                    "label": "Dart",
                    "number": 1.6831159675713783
                },
                {
                    "label": "Clojure",
                    "number": 1.5380388205970286
                },
                {
                    "label": "C#",
                    "number": 1.4718724847174318
                },
                {
                    "label": "Haskell",
                    "number": 1.4053836558966724
                },
                {
                    "label": "Rust",
                    "number": 1.3954722789882958
                },
                {
                    "label": "Java",
                    "number": 1.3830075102161161
                },
                {
                    "label": "Groovy",
                    "number": 1.3747903543277236
                }
            ],
            "answer": "Scala",
            "answerValue": 2.0765206194226975,
            "question": "Developers of which programming language refactor the most?",
            "rowIndex": 58,
            "approved": true,
            "params": {
                "regex": "refactor",
                "per": 100,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'refactor') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'refactor') THEN 1 ELSE 0 END) * 100 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "% of Commits",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        
        {
            "top10": [
                {
                    "label": "Kuwait",
                    "number": 9.541452858337296
                },
                {
                    "label": "Bahrain",
                    "number": 8.40923385124275
                },
                {
                    "label": "Anguilla",
                    "number": 7.24112961622013
                },
                {
                    "label": "Saudi Arabia",
                    "number": 6.753160680035749
                },
                {
                    "label": "Armenia",
                    "number": 6.674316145363452
                },
                {
                    "label": "Mauritania",
                    "number": 5.926901547579848
                },
                {
                    "label": "Morocco",
                    "number": 5.90697492469585
                },
                {
                    "label": "Tajikistan",
                    "number": 5.574874427333444
                },
                {
                    "label": "Mali",
                    "number": 5.533645174111101
                },
                {
                    "label": "United Arab Emirates",
                    "number": 5.486549222496307
                }
            ],
            "answer": "Kuwait",
            "answerValue": 9.541452858337296,
            "question": "Which country showed the most empathy last year?",
            "rowIndex": 59,
            "approved": true,
            "params": {
                "codes": "('018')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 1000,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('018') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('018') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 380579334
        },
        {
            "top10": [
                {
                    "label": "Sao Tome and Principe",
                    "number": 3.7593984962406015
                },
                {
                    "label": "Samoa",
                    "number": 1.076555023923445
                },
                {
                    "label": "Croatia",
                    "number": 0.9102886573242305
                },
                {
                    "label": "Belarus",
                    "number": 0.7748051592908254
                },
                {
                    "label": "Peru",
                    "number": 0.7103253684812849
                },
                {
                    "label": "Algeria",
                    "number": 0.4035003656722064
                },
                {
                    "label": "Bahrain",
                    "number": 0.3960027021360852
                },
                {
                    "label": "Azerbaijan",
                    "number": 0.37942809837535785
                },
                {
                    "label": "Macedonia",
                    "number": 0.3632880874533505
                },
                {
                    "label": "Tajikistan",
                    "number": 0.35877904730363747
                }
            ],
            "answer": "Sao Tome and Principe",
            "answerValue": 3.7593984962406015,
            "question": "Which country is the most agreeable in their media?",
            "rowIndex": 60,
            "approved": true,
            "params": {
                "codes": "('019')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 1000,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('019') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('019') THEN 1 ELSE 0 END) * 1000 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events per 1,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 380579334
        },
        {
            "top10": [
                {
                    "label": "Erlang",
                    "number": 6.448707556516257
                },
                {
                    "label": "F#",
                    "number": 5.94988573514895
                },
                {
                    "label": "Clojure",
                    "number": 5.6261734824051235
                },
                {
                    "label": "Rust",
                    "number": 5.414156426656758
                },
                {
                    "label": "Scheme",
                    "number": 5.341569061631995
                },
                {
                    "label": "Scala",
                    "number": 5.126809964437498
                },
                {
                    "label": "CoffeeScript",
                    "number": 4.592680977520628
                },
                {
                    "label": "Elixir",
                    "number": 4.53228762291367
                },
                {
                    "label": "XSLT",
                    "number": 4.429473510718296
                },
                {
                    "label": "TypeScript",
                    "number": 4.422290528108843
                }
            ],
            "answer": "Erlang",
            "answerValue": 6.448707556516257,
            "question": "Which programming language quickly fixes committed mistakes most often?",
            "rowIndex": 61,
            "approved": true,
            "params": {
                "regex": "fix broken",
                "per": 10000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'fix broken') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'fix broken') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 10,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Russia",
                    "number": 2568
                },
                {
                    "label": "United Kingdom",
                    "number": 2068
                },
                {
                    "label": "France",
                    "number": 2023
                },
                {
                    "label": "Nigeria",
                    "number": 1722
                },
                {
                    "label": "Germany",
                    "number": 1630
                },
                {
                    "label": "Turkey",
                    "number": 1260
                },
                {
                    "label": "Pakistan",
                    "number": 1193
                },
                {
                    "label": "Israel",
                    "number": 1060
                },
                {
                    "label": "Canada",
                    "number": 1005
                },
                {
                    "label": "China",
                    "number": 969
                }
            ],
            "answer": "Russia",
            "answerValue": 2568,
            "question": "Which country, besides the United States, called other countries on the phone the most?",
            "rowIndex": 62,
            "approved": true,
            "params": {
                "codes": "('041')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 1000,
                "filter_us": true
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('041') THEN 1 ELSE 0 END) total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015 \n  AND codes.country != 'United States'\nGROUP BY\n  codes.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  'userInput',\n  COUNT(*)\nFROM (\n  SELECT\n    events.GLOBALEVENTID,\n  FROM\n    [gdelt-bq:full.events] events\n  JOIN\n    [gdelt-bq:extra.countryinfo] codes\n  ON\n    events.Actor1CountryCode = codes.iso3\n  JOIN (\n    SELECT\n      *\n    FROM (\n      SELECT\n        sub,\n        obj AS alias,\n        CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n        SUM(input) OVER (PARTITION BY sub) AS input_alias\n      FROM\n        [fh-bigquery:freebase20140119.triples_lang_en]\n      WHERE\n        (pred = '/common/topic/alias'\n          OR pred = '/type/object/name'))\n    WHERE\n      input_alias > 0) aliases\n  ON\n    aliases.alias = codes.country\n  WHERE\n    Year = 2015\n    AND events.EventCode IN ('041') \n  AND codes.country != 'United States'\n  GROUP BY\n    events.GLOBALEVENTID)\n  IGNORE CASE\n",
            "databases": "Reddit",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 380579150
        },
        {
            "top10": [
                {
                    "label": "Erlang",
                    "number": 6.448707556516257
                },
                {
                    "label": "F#",
                    "number": 5.94988573514895
                },
                {
                    "label": "Clojure",
                    "number": 5.6261734824051235
                },
                {
                    "label": "Rust",
                    "number": 5.414156426656758
                },
                {
                    "label": "Scheme",
                    "number": 5.341569061631995
                },
                {
                    "label": "Scala",
                    "number": 5.126809964437498
                },
                {
                    "label": "CoffeeScript",
                    "number": 4.592680977520628
                },
                {
                    "label": "Elixir",
                    "number": 4.53228762291367
                },
                {
                    "label": "XSLT",
                    "number": 4.429473510718296
                },
                {
                    "label": "TypeScript",
                    "number": 4.422290528108843
                }
            ],
            "answer": "Erlang",
            "answerValue": 6.448707556516257,
            "question": "Which programming language adds polyfills the most?",
            "rowIndex": 63,
            "approved": true,
            "params": {
                "regex": "fix broken",
                "per": 10000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'fix broken') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'fix broken') THEN 1 ELSE 0 END) * 10000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 10,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
       
        {
            "top10": [
                {
                    "label": "F#",
                    "number": 1.3522467579883977
                },
                {
                    "label": "D",
                    "number": 0.6766357669666418
                },
                {
                    "label": "Arduino",
                    "number": 0.6702862122126148
                },
                {
                    "label": "C",
                    "number": 0.36718586258054403
                },
                {
                    "label": "Erlang",
                    "number": 0.3602629919841484
                },
                {
                    "label": "CoffeeScript",
                    "number": 0.22513142046669743
                },
                {
                    "label": "Python",
                    "number": 0.219140275133746
                },
                {
                    "label": "Java",
                    "number": 0.21715241047017236
                },
                {
                    "label": "Scala",
                    "number": 0.21677843401427052
                },
                {
                    "label": "C++",
                    "number": 0.20903750119706632
                }
            ],
            "answer": "F#",
            "answerValue": 1.3522467579883977,
            "question": "Developers of which programming language are shocked the most?",
            "rowIndex": 64,
            "approved": true,
            "params": {
                "regex": "what the actual ",
                "per": 100000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'what the actual ') THEN 1 ELSE 0 END) * 100000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'what the actual ') THEN 1 ELSE 0 END) * 100000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 100,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },
        {
            "top10": [
                {
                    "label": "Haxe",
                    "number": 1.7414321538032878
                },
                {
                    "label": "Swift",
                    "number": 0.861341280642216
                },
                {
                    "label": "Puppet",
                    "number": 0.6239607154333563
                },
                {
                    "label": "Groovy",
                    "number": 0.6065697570384838
                },
                {
                    "label": "Go",
                    "number": 0.5246319968857844
                },
                {
                    "label": "Ruby",
                    "number": 0.44727606765008326
                },
                {
                    "label": "Scala",
                    "number": 0.32516765102140577
                },
                {
                    "label": "Objective-C",
                    "number": 0.26641741837081306
                },
                {
                    "label": "Python",
                    "number": 0.25827246712191493
                },
                {
                    "label": "Clojure",
                    "number": 0.21806873962810558
                }
            ],
            "answer": "Haxe",
            "answerValue": 1.7414321538032878,
            "question": "Developers of which programming language accidentally commit the most credentials?",
            "rowIndex": 65,
            "approved": true,
            "params": {
                "regex": "(?i)\\b(remove credentials)\\b",
                "per": 100000,
                "min_commits": 50000
            },
            "sql": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(remove credentials)\\b') THEN 1 ELSE 0 END) * 100000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "inputSQL": "\nSELECT\n  repository_language,\n  SUM(CASE WHEN REGEXP_MATCH(payload_commit_msg, r'(?i)\\b(remove credentials)\\b') THEN 1 ELSE 0 END) * 100000 / COUNT(*) AS per,\n  COUNT(*) as total\nFROM\n  [bigquery-public-data:samples.github_timeline]\nWHERE\n  type = 'PushEvent'\n  AND repository_language IS NOT NULL\n  AND repository_language = 'userInput'\nGROUP BY\n  repository_language\nHAVING\n  total > 50000\nORDER BY\n  per DESC IGNORE CASE\n",
            "databases": "GitHub",
            "units": "Commits per 100,000",
            "hasPassingInputQuery": false,
            "rowsSearched": 290264874
        },

        {
            "top10": [
                {
                    "label": "Benin",
                    "number": 4.09982174688057
                },
                {
                    "label": "Moldova",
                    "number": 2.610948258231645
                },
                {
                    "label": "Niger",
                    "number": 2.578350744609913
                },
                {
                    "label": "Burkina Faso",
                    "number": 2.257799671592775
                },
                {
                    "label": "Cameroon",
                    "number": 2.1497738949262497
                },
                {
                    "label": "Guinea-Bissau",
                    "number": 2.0587242659466756
                },
                {
                    "label": "Georgia",
                    "number": 1.9250253292806485
                },
                {
                    "label": "Zambia",
                    "number": 1.8951598305759694
                },
                {
                    "label": "Swaziland",
                    "number": 1.8194380469829572
                },
                {
                    "label": "India",
                    "number": 1.781373556395753
                }
            ],
            "answer": "Benin",
            "answerValue": 4.09982174688057,
            "question": "Which country made the most demands for economic, military and/or humanitarian aid?",
            "rowIndex": 66,
            "approved": true,
            "params": {
                "codes": "('100','101','1011','1012','1013','1014','102','103','1031','1032','1033', '1034', '104', '1041', '1042', '1043', '1044', '105', '1051', '1052', '1053', '1054', '1055', '1056', '106', '107', '108')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 100,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('100','101','1011','1012','1013','1014','102','103','1031','1032','1033', '1034', '104', '1041', '1042', '1043', '1044', '105', '1051', '1052', '1053', '1054', '1055', '1056', '106', '107', '108') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('100','101','1011','1012','1013','1014','102','103','1031','1032','1033', '1034', '104', '1041', '1042', '1043', '1044', '105', '1051', '1052', '1053', '1054', '1055', '1056', '106', '107', '108') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "% of Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 380821141
        },
        {
            "top10": [
                {
                    "label": "Cape Verde",
                    "number": 9.248242293131423
                },
                {
                    "label": "Madagascar",
                    "number": 3.5483274810571057
                },
                {
                    "label": "Bahamas",
                    "number": 3.303081807395055
                },
                {
                    "label": "Maldives",
                    "number": 3.27296
                },
                {
                    "label": "Andorra",
                    "number": 2.8477546549835706
                },
                {
                    "label": "Malaysia",
                    "number": 2.663390487122462
                },
                {
                    "label": "Nauru",
                    "number": 2.508827355510128
                },
                {
                    "label": "Peru",
                    "number": 2.1769143533356345
                },
                {
                    "label": "Gabon",
                    "number": 2.037665946279716
                },
                {
                    "label": "Brazil",
                    "number": 2.0320581416087036
                }
            ],
            "answer": "Cape Verde",
            "answerValue": 9.248242293131423,
            "question": "Which country was involved in the most investigations last year?",
            "rowIndex": 67,
            "approved": true,
            "params": {
                "codes": "('090','091','092','093','094')",
                "relation": "Actor2CountryCode",
                "year": 2015,
                "per": 100,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('090','091','092','093','094') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor2CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('090','091','092','093','094') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor2CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "Reddit ",
            "units": "% of Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 380578805
        },
        {
            "top10": [
                {
                    "label": "Hong Kong",
                    "number": 20.79636888797194
                },
                {
                    "label": "Venezuela",
                    "number": 10.587039693926352
                },
                {
                    "label": "Guinea-Bissau",
                    "number": 10.496118798515019
                },
                {
                    "label": "Zimbabwe",
                    "number": 9.34741142114414
                },
                {
                    "label": "Albania",
                    "number": 9.223916271321478
                },
                {
                    "label": "Argentina",
                    "number": 8.899516270888302
                },
                {
                    "label": "India",
                    "number": 8.395766203449686
                },
                {
                    "label": "Bahrain",
                    "number": 8.318192406242721
                },
                {
                    "label": "Nigeria",
                    "number": 8.175644888660248
                },
                {
                    "label": "Georgia",
                    "number": 8.00405268490375
                }
            ],
            "answer": "Hong Kong",
            "answerValue": 20.79636888797194,
            "question": "Which country was the most disapproving last year?",
            "rowIndex": 68,
            "approved": true,
            "params": {
                "codes": "('110','111','112','1121','1122','1123','1124','1125','113','114','115','116')",
                "relation": "Actor1CountryCode",
                "year": 2015,
                "per": 100,
                "min_events": 1
            },
            "sql": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('110','111','112','1121','1122','1123','1124','1125','113','114','115','116') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  codes.country,\n  SUM(CASE WHEN events.EventCode IN ('110','111','112','1121','1122','1123','1124','1125','113','114','115','116') THEN 1 ELSE 0 END) * 100 / COUNT(*) as per,\n  COUNT(*) as total\nFROM\n  [gdelt-bq:full.events] events\nJOIN\n  [gdelt-bq:extra.countryinfo] codes\nON\n  events.Actor1CountryCode = codes.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = codes.country\nWHERE\n  Year = 2015\nGROUP BY\n  codes.country\nHAVING\n  total > 1\nORDER BY\n  per DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "% of Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 380821141
        },
        {
            "top10": [
                {
                    "label": "Yemen",
                    "number": 41538
                },
                {
                    "label": "Iran",
                    "number": 33250
                },
                {
                    "label": "United States",
                    "number": 30094
                },
                {
                    "label": "Pakistan",
                    "number": 14675
                },
                {
                    "label": "Syria",
                    "number": 12682
                },
                {
                    "label": "Russia",
                    "number": 10720
                },
                {
                    "label": "Egypt",
                    "number": 10472
                },
                {
                    "label": "Turkey",
                    "number": 9220
                },
                {
                    "label": "United Kingdom",
                    "number": 7154
                },
                {
                    "label": "Qatar",
                    "number": 6475
                }
            ],
            "answer": "Yemen",
            "answerValue": 41538,
            "question": "Which country was mentioned with Saudi Arabia the most last year?",
            "rowIndex": 69,
            "approved": true,
            "params": {
                "country": "Saudi Arabia",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'Saudi Arabia' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'Saudi Arabia' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761319763
        },


        {
            "top10": [
                {
                    "label": "France",
                    "number": 4317
                },
                {
                    "label": "United States",
                    "number": 3616
                },
                {
                    "label": "Spain",
                    "number": 3012
                },
                {
                    "label": "Algeria",
                    "number": 1611
                },
                {
                    "label": "Libya",
                    "number": 1464
                },
                {
                    "label": "United Kingdom",
                    "number": 1284
                },
                {
                    "label": "Tunisia",
                    "number": 1233
                },
                {
                    "label": "Egypt",
                    "number": 1040
                },
                {
                    "label": "Saudi Arabia",
                    "number": 1006
                },
                {
                    "label": "Italy",
                    "number": 882
                }
            ],
            "answer": "France",
            "answerValue": 4317,
            "question": "Which country was mentioned with Morocco the most last year?",
            "rowIndex": 70,
            "approved": true,
            "params": {
                "country": "Morocco",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'Morocco' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'Morocco' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761314381
        },
        {
            "top10": [
                {
                    "label": "China",
                    "number": 3300
                },
                {
                    "label": "Russia",
                    "number": 1866
                },
                {
                    "label": "United States",
                    "number": 1124
                },
                {
                    "label": "South Korea",
                    "number": 901
                },
                {
                    "label": "Japan",
                    "number": 652
                },
                {
                    "label": "Malaysia",
                    "number": 576
                },
                {
                    "label": "Australia",
                    "number": 407
                },
                {
                    "label": "North Korea",
                    "number": 317
                },
                {
                    "label": "United Kingdom",
                    "number": 302
                },
                {
                    "label": "Iran",
                    "number": 217
                }
            ],
            "answer": "China",
            "answerValue": 3300,
            "question": "Which country was mentioned with Mongolia the most last year?",
            "rowIndex": 71,
            "approved": true,
            "params": {
                "country": "Mongolia",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'Mongolia' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'Mongolia' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761308632
        },
        {
            "top10": [
                {
                    "label": "Pakistan",
                    "number": 49022
                },
                {
                    "label": "United States",
                    "number": 38225
                },
                {
                    "label": "Iraq",
                    "number": 14011
                },
                {
                    "label": "Iran",
                    "number": 6427
                },
                {
                    "label": "United Kingdom",
                    "number": 6399
                },
                {
                    "label": "Russia",
                    "number": 6214
                },
                {
                    "label": "China",
                    "number": 5834
                },
                {
                    "label": "Canada",
                    "number": 3038
                },
                {
                    "label": "Syria",
                    "number": 3019
                },
                {
                    "label": "Germany",
                    "number": 2730
                }
            ],
            "answer": "Pakistan",
            "answerValue": 49022,
            "question": "Which country was mentioned with Afghanistan the most last year?",
            "rowIndex": 72,
            "approved": true,
            "params": {
                "country": "Afghanistan",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'Afghanistan' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'Afghanistan' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761318012
        },
        {
            "top10": [
                {
                    "label": "China",
                    "number": 10855
                },
                {
                    "label": "Malaysia",
                    "number": 10150
                },
                {
                    "label": "United States",
                    "number": 7360
                },
                {
                    "label": "Myanmar",
                    "number": 6233
                },
                {
                    "label": "Indonesia",
                    "number": 5997
                },
                {
                    "label": "Vietnam",
                    "number": 4596
                },
                {
                    "label": "Japan",
                    "number": 4455
                },
                {
                    "label": "Cambodia",
                    "number": 4279
                },
                {
                    "label": "Australia",
                    "number": 4236
                },
                {
                    "label": "United Kingdom",
                    "number": 3535
                }
            ],
            "answer": "China",
            "answerValue": 10855,
            "question": "Which country was mentioned with Thailand the most last year?",
            "rowIndex": 73,
            "approved": true,
            "params": {
                "country": "Thailand",
                "year": 2015
            },
            "sql": "\nSELECT\n  other.country,\n  COUNT(*) AS total\nFROM (\n  SELECT\n    ccode,\n    other\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nWHERE\n  country.country = 'Thailand' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "inputSQL": "\nSELECT\n  other.country,\n  COUNT(UNIQUE(events.id)) AS total\nFROM (\n  SELECT\n    ccode,\n    other,\n    id\n  FROM (\n    SELECT\n      Actor1Code AS ccode,\n      Actor2Code AS other,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc1,\n    (\n    SELECT\n      Actor1Code AS other,\n      Actor2Code AS ccode,\n      Year,\n      GLOBALEVENTID as id\n    FROM\n      [gdelt-bq:full.events]) cc2\n  WHERE\n    Year = 2015) events\nJOIN\n  [gdelt-bq:extra.countryinfo] country\nON\n  country.iso3 = events.ccode\nJOIN\n  [gdelt-bq:extra.countryinfo] other\nON\n  events.other = other.iso3\nJOIN (\n  SELECT\n    *\n  FROM (\n    SELECT\n      sub,\n      obj AS alias,\n      CASE WHEN obj = 'userInput' THEN 1 ELSE 0 END AS input,\n      SUM(input) OVER (PARTITION BY sub) AS input_alias\n    FROM\n      [fh-bigquery:freebase20140119.triples_lang_en]\n    WHERE\n      (pred = '/common/topic/alias'\n        OR pred = '/type/object/name'))\n  WHERE\n    input_alias > 0) aliases\nON\n  aliases.alias = other.country\nWHERE\n  country.country = 'Thailand' \nGROUP BY\n  country.country,\n  other.country\nORDER BY\n  total DESC\nIGNORE CASE\n",
            "databases": "GDELT",
            "units": "Events",
            "hasPassingInputQuery": false,
            "rowsSearched": 761316252
        }
    ],
    "total": 73
}